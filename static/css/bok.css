–ø—Ä–∏—à–ª–∏ –ø–æ–ª–Ω—ã–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π 
{% load static %}
<!DOCTYPE html>
<html lang="ru">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{% block title %}–ü—Ä–æ—Ñ–∏–ª—å{% endblock %}</title>
        
        <!-- –ó–∞–ø—Ä–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∏ —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π -->
        <style>
            html, body {
                max-width: 100%;
                overflow-x: hidden;
            }

            /* –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ —Ä–∞–º–∫–∏ */
            .app-layout, 
            .app-content,
            .tab-content,
            .pet-card,
            .card,
            form,
            .modal-content {
                max-width: 100%;
                box-sizing: border-box;
            }

            /* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω—ã –≤—ã—Ö–æ–¥–∏—Ç—å –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */
            img {
                max-width: 100%;
                height: auto;
            }

            /* –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ */
            * {
                word-wrap: break-word;
                overflow-wrap: break-word;
            }
            
            /* –°–¢–ò–õ–ò –î–õ–Ø –í–´–ü–ê–î–ê–Æ–©–ï–ì–û –ú–ï–ù–Æ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô - –° –í–´–°–û–ö–ò–ú –ü–†–ò–û–†–ò–¢–ï–¢–û–ú */
            .app-notification-wrapper {
                position: relative !important;
            }
            
            .app-notification-icon {
                cursor: pointer !important;
            }
            
            .app-notification-dropdown {
                position: absolute !important;
                background: white !important;
                border: none !important;
                width: 260px !important;
                max-height: 400px !important;
                overflow-y: auto !important;
                z-index: 9999 !important; /* –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π z-index */
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2) !important;
                border-radius: 8px !important;
                top: 45px !important;
                right: 0 !important;
                opacity: 0 !important;
                visibility: hidden !important;
                transition: opacity 0.3s ease, visibility 0.3s ease !important;
            }
            
            .app-notification-dropdown.show {
                opacity: 1 !important;
                visibility: visible !important;
            }
            
            /* –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–∞–¥ –≤—ã–ø–∞–¥–∞—é—â–∏–º –º–µ–Ω—é */
            .app-notification-dropdown:before {
                content: '' !important;
                position: absolute !important;
                top: -8px !important;
                right: 18px !important;
                width: 0 !important;
                height: 0 !important;
                border-left: 8px solid transparent !important;
                border-right: 8px solid transparent !important;
                border-bottom: 8px solid white !important;
            }
            
            .app-notif-item {
                padding: 12px 15px !important;
                border-bottom: 1px solid #eee !important;
                display: flex !important;
                justify-content: space-between !important;
                background-color: white !important;
            }
            
            .app-notif-message {
                color: #333 !important;
            }
            
            /* –§–∏–∫—Å–∞—Ü–∏—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ –º–µ–Ω—é –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö */
            @media (max-width: 768px) {
                .app-notification-dropdown {
                    right: 0 !important;
                    left: auto !important;
                    width: 260px !important;
                    max-width: 85vw !important;
                }
            }
        </style>
        
        <link rel="stylesheet" href="{% static 'css/style.css' %}">
        {% block extra_css %}{% endblock %}
    </head>
<body>
    <div class="app-layout">
        <nav id="mainSidebar" class="app-sidebar">
            <!-- –õ–æ–≥–æ—Ç–∏–ø —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º -->
            <div class="app-logo">
                <img src="{% static 'img/logopet.jpeg' %}" alt="PetHub Logo" class="app-logo-img">
                <span>PetHub</span>
            </div>
            
            <!-- –ù–∞ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å–ø—Ä–∞–≤–∞ –±—É–¥—É—Ç –∫–Ω–æ–ø–∫–∏ -->
            <div class="app-actions-group">
                {% if user.is_authenticated %}
                <div class="app-notification-wrapper">
                    <div class="app-notification-icon" id="notificationButton">
                        üîî
                        {% if notification_count > 0 %}
                            <span class="app-notif-badge">{{ notification_count }}</span>
                        {% endif %}
                    </div>
            
                    <div class="app-notification-dropdown" id="notifDropdown">
                        {% for note in notifications %}
                            {% if not note.is_read %}
                                <div class="app-notif-item" data-id="{{ note.id }}">
                                    <span class="app-notif-message">{{ note.message }}</span>
                                    <form method="post" action="{% url 'mark_notification_read' note.id %}">
                                        {% csrf_token %}
                                        <button type="submit" title="–ü—Ä–æ—á–∏—Ç–∞–Ω–æ" class="app-notif-btn">‚úì</button>
                                    </form>
                                </div>
                            {% endif %}
                        {% empty %}
                            <div class="app-notif-item app-notif-empty">–ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</div>
                        {% endfor %}
                    </div>
                </div>
                {% endif %}
                
                <!-- –ö–Ω–æ–ø–∫–∞-–≥–∞–º–±—É—Ä–≥–µ—Ä –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é -->
                <button class="app-mobile-toggle" onclick="toggleMobileMenu()">‚ò∞</button>
            </div>
            
            <ul class="app-nav">
                <li class="app-nav-item"><a href="{% url 'dashboard' %}" class="app-nav-link">–ì–ª–∞–≤–Ω–∞—è</a></li>
                <li class="app-nav-item"><a href="{% url 'profile' %}" class="app-nav-link">–ü—Ä–æ—Ñ–∏–ª—å</a></li>
                <li class="app-nav-item"><a href="{% url 'pets:list' %}" class="app-nav-link">–ú–æ–∏ –ø–∏—Ç–æ–º—Ü—ã</a></li>
                <li class="app-nav-item"><a href="{% url 'training:lesson_list' %}" class="app-nav-link">–î—Ä–µ—Å—Å–∏—Ä–æ–≤–∫–∞</a></li>
                <li class="app-nav-item"><a href="{% url 'articles:list' %}" class="app-nav-link">–°—Ç–∞—Ç—å–∏</a></li>
                <li class="app-nav-item"><a href="{% url 'account_logout' %}" class="app-nav-link">–í—ã–π—Ç–∏</a></li>
            </ul>
        </nav>
        <main class="app-content">
            {% block content %}{% endblock %}
        </main>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function() {
            // –ö–Ω–æ–ø–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            const notificationButton = document.getElementById("notificationButton");
            const notificationDropdown = document.getElementById("notifDropdown");
            
            if (notificationButton && notificationDropdown) {
                notificationButton.addEventListener("click", function(e) {
                    e.stopPropagation();
                    notificationDropdown.classList.toggle("show");
                });
                
                // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–µ–Ω—é
                document.addEventListener("click", function(e) {
                    if (!e.target.closest(".app-notification-wrapper")) {
                        notificationDropdown.classList.remove("show");
                    }
                });
            }
            
            // –ú–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é
            document.querySelectorAll(".app-nav-link").forEach(link => {
                link.addEventListener("click", () => {
                    if (window.innerWidth <= 768) {
                        document.getElementById("mainSidebar").classList.remove("expanded");
                    }
                });
            });
            
            window.addEventListener("resize", () => {
                if (window.innerWidth > 768) {
                    document.getElementById("mainSidebar").classList.remove("expanded");
                }
            });
        });
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
        function toggleMobileMenu() {
            const sidebar = document.getElementById("mainSidebar");
            sidebar.classList.toggle("expanded");
        }
        
        function getCookie(name) {
            let cookieValue = null;
            if (document.cookie && document.cookie !== '') {
                const cookies = document.cookie.split(';');
                for (let i = 0; i < cookies.length; i++) {
                    const cookie = cookies[i].trim();
                    if (cookie.substring(0, name.length + 1) === (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }
    </script>
</body>
</html>


—Ç–µ–ø–µ—Ä—å –Ω–∞–¥–æ –∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ 2 –∫–æ–ø–∏–π —á–µ—Ä–µ–∑ –ø–∏—Ç–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤—è–∑—ã–≤–∞—Ç—å –∏—Ö –≤ —Å–µ—Ä–∏—é —Å –ø–µ—Ä—ã–º –µ–∂–µ–≥–æ–¥–Ω—ã–º 
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from .models import Event, ReminderSettings, EVENT_TYPES
from pets.models import Pet
from datetime import datetime
from django.utils import timezone
from django.contrib import messages # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º messages –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é


import logging

logging.basicConfig(
    level=logging.ERROR,
    format='%(asctime)s %(levelname)s %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S',
    filename='error.log',
    filemode='a'
)

logger = logging.getLogger(__name__)

WEEKDAY_CHOICES = [
    ("0", "–ü–Ω"),
    ("1", "–í—Ç"),
    ("2", "–°—Ä"),
    ("3", "–ß—Ç"),
    ("4", "–ü—Ç"),
    ("5", "–°–±"),
    ("6", "–í—Å"),
]

@login_required
def add_event(request, pet_id):
    pet = get_object_or_404(Pet, id=pet_id)

    if request.user not in pet.owners.all():
        return redirect('pets:list')

    error = None

    if request.method == 'POST':
        title = request.POST.get('title', '').strip()
        event_type = request.POST.get('event_type')
        date = request.POST.get('date')
        time = request.POST.get('time') or None
        duration = request.POST.get('duration') or None
        note = request.POST.get('note', '')
        is_yearly = request.POST.get('is_yearly') == 'on'

        event_date = datetime.strptime(date, '%Y-%m-%d').date()
        if is_yearly and event_date.month == 2 and event_date.day == 29:
            error = "–ï–∂–µ–≥–æ–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ 29 —Ñ–µ–≤—Ä–∞–ª—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∫–∞–∂–¥—ã–π –≥–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –≤–∏—Å–æ–∫–æ—Å–Ω—ã–º."
            return render(request, 'calendarapp/add_event.html', {
                'pet': pet,
                'error': error,
                'initial': initial if request.method == 'POST' else {},
                'event_type_choices': EVENT_TYPES,
            })

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        if Event.objects.filter(pet=pet, title=title, date=date).exists():
            error = "–°–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –¥–∞—Ç–æ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
        else:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            current_year = datetime.now().year
            event_date = datetime.strptime(date, '%Y-%m-%d').date()

            if is_yearly:
                for year in [current_year, current_year + 1, current_year + 2]:
                    new_date = event_date.replace(year=year)
                    Event.objects.create(
                        pet=pet,
                        title=title,
                        event_type=event_type,
                        date=new_date,
                        time=time,
                        duration_minutes=duration if duration else None,
                        note=note,
                        is_yearly=True,
                        is_done=False
                    )
            else:
                Event.objects.create(
                    pet=pet,
                    title=title,
                    event_type=event_type,
                    date=event_date,
                    time=time,
                    duration_minutes=duration if duration else None,
                    note=note,
                    is_yearly=is_yearly,
                    is_done=False
                )

            remind_at = request.POST.get('remind_at') or None
            repeat = request.POST.get('repeat') == 'on'

            if remind_at:
                for event in Event.objects.filter(pet=pet, title=title, event_type=event_type):
                    rs, _ = ReminderSettings.objects.get_or_create(event=event, defaults={'pet': pet})
                    rs.remind_at = remind_at
                    rs.repeat = repeat
                    if repeat:
                        rs.repeat_days = request.POST.getlist('repeat_days')
                        rs.repeat_every = int(request.POST.get('repeat_every') or 1)
                        rs.remind_date = None
                    else:
                        rs.repeat_days = []
                        rs.remind_date = request.POST.get('remind_date') or None
                        rs.repeat_every = 1
                    rs.save()

            return redirect(f'/pets/{pet_id}/?tab=calendar#{date}')

        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - —Ñ–æ—Ä–º–∞ –ø–µ—Ä–µ—Ä–∏—Å—É–µ—Ç—Å—è —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

    # –î–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
    initial = {}
    if request.method == 'POST':
        for field in ['title', 'event_type', 'date', 'time', 'duration', 'note', 'is_yearly',
                      'remind_at', 'repeat', 'repeat_days', 'repeat_every', 'remind_date']:
            initial[field] = request.POST.get(field, '')

    return render(request, 'calendarapp/add_event.html', {
        'pet': pet,
        'error': error,
        'initial': initial if request.method == 'POST' else {},
        'event_type_choices': EVENT_TYPES,
    })

from django.db import transaction


@login_required
def edit_event(request, event_id):
    event = get_object_or_404(Event, id=event_id)
    if request.user not in event.pet.owners.all():
        return redirect('pets:list')

    error = None
    pet_id = event.pet.id
    event_type_choices = EVENT_TYPES
    weekday_choices = WEEKDAY_CHOICES
    reminder = getattr(event, 'reminder', None)
    is_birthday = event.event_type == 'birthday'

    # --- –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ form_data –∏ repeat_days_selected ---
    if request.method == 'POST':
        if is_birthday:
            # –î–ª—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –ø–æ–ª—è
            time = request.POST.get('time') or None
            duration = request.POST.get('duration') or None
            note = request.POST.get('note', '')
            apply_to_all = request.POST.get('apply_to_all') == 'on'
            reminder_repeat = request.POST.get('repeat') == 'on'
            reminder_repeat_days = request.POST.getlist('repeat_days')
            reminder_repeat_every = request.POST.get('repeat_every') or 1
            remind_at = request.POST.get('remind_at') or None
            remind_date = request.POST.get('remind_date') or None

            if apply_to_all:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
                with transaction.atomic():
                    birthday_events = Event.objects.filter(
                        pet=event.pet,
                        event_type='birthday',
                        is_yearly=True
                    )
                    for ev in birthday_events:
                        ev.time = time
                        ev.duration_minutes = duration if duration else None
                        ev.note = note
                        ev.save()

                        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                        rs, _ = ReminderSettings.objects.get_or_create(event=ev, defaults={'pet': event.pet})
                        rs.repeat = reminder_repeat
                        rs.repeat_days = reminder_repeat_days
                        rs.repeat_every = int(reminder_repeat_every)
                        rs.remind_at = remind_at
                        rs.remind_date = remind_date if not reminder_repeat else None
                        rs.save()
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
                event.time = time
                event.duration_minutes = duration if duration else None
                event.note = note
                event.save()

                # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                rs, _ = ReminderSettings.objects.get_or_create(event=event, defaults={'pet': event.pet})
                rs.repeat = reminder_repeat
                rs.repeat_days = reminder_repeat_days
                rs.repeat_every = int(reminder_repeat_every)
                rs.remind_at = remind_at
                rs.remind_date = remind_date if not reminder_repeat else None
                rs.save()

            return redirect(f'/pets/{pet_id}/?tab=calendar#{event.date}')
        else:
            # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...
            title = request.POST.get('title', '').strip()
            event_type = request.POST.get('event_type')
            date_str = request.POST.get('date')
            time = request.POST.get('time') or None
            duration = request.POST.get('duration') or None
            note = request.POST.get('note', '')
            is_yearly = request.POST.get('is_yearly') == 'on'
            apply_to_all = request.POST.get('apply_to_all') == 'on'
            reminder_repeat = request.POST.get('repeat') == 'on'
            reminder_repeat_days = request.POST.getlist('repeat_days')
            reminder_repeat_every = request.POST.get('repeat_every') or 1
            remind_at = request.POST.get('remind_at') or None
            remind_date = request.POST.get('remind_date') or None

            try:
                date = datetime.strptime(date_str, '%Y-%m-%d').date() if date_str else event.date
                
                if is_yearly and date.month == 2 and date.day == 29:
                    error = "–ï–∂–µ–≥–æ–¥–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ 29 —Ñ–µ–≤—Ä–∞–ª—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∫–∞–∂–¥—ã–π –≥–æ–¥ —è–≤–ª—è–µ—Ç—Å—è –≤–∏—Å–æ–∫–æ—Å–Ω—ã–º."
                elif apply_to_all and event.is_yearly:
                    with transaction.atomic():
                        all_events = list(Event.objects.filter(
                            pet=event.pet,
                            event_type=event.event_type,
                            is_yearly=True,
                        ).order_by('date'))

                        used_dates = set()
                        for ev in all_events:
                            new_date = date.replace(year=ev.date.year)
                            new_title = title
                            conflict = Event.objects.filter(
                                pet=event.pet,
                                title=new_title,
                                date=new_date
                            ).exclude(id=ev.id).exists()
                            if conflict or (new_title, new_date) in used_dates:
                                continue
                            used_dates.add((new_title, new_date))

                            ev.title = new_title
                            ev.event_type = event_type
                            ev.date = new_date
                            ev.time = time
                            ev.duration_minutes = duration if duration else None
                            ev.note = note
                            ev.is_yearly = is_yearly
                            ev.save()
                            
                            rs, _ = ReminderSettings.objects.get_or_create(event=ev, defaults={'pet': event.pet})
                            rs.repeat = reminder_repeat
                            rs.repeat_days = reminder_repeat_days
                            rs.repeat_every = int(reminder_repeat_every)
                            rs.remind_at = remind_at
                            rs.remind_date = remind_date if not reminder_repeat else None
                            rs.save()
                    return redirect(f'/pets/{pet_id}/?tab=calendar#{date}')
                else:
                    conflict = Event.objects.filter(
                        pet=event.pet,
                        title=title,
                        date=date
                    ).exclude(id=event.id).exists()
                    if conflict:
                        error = '–°–æ–±—ã—Ç–∏–µ —Å —Ç–∞–∫–æ–π –¥–∞—Ç–æ–π –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.'
                    else:
                        event.title = title
                        event.event_type = event_type
                        event.date = date
                        event.time = time
                        event.duration_minutes = duration if duration else None
                        event.note = note
                        event.is_yearly = is_yearly
                        event.save()
                        
                        rs, _ = ReminderSettings.objects.get_or_create(event=event, defaults={'pet': event.pet})
                        rs.repeat = reminder_repeat
                        rs.repeat_days = reminder_repeat_days
                        rs.repeat_every = int(reminder_repeat_every)
                        rs.remind_at = remind_at
                        rs.remind_date = remind_date if not reminder_repeat else None
                        rs.save()
                        return redirect(f'/pets/{pet_id}/?tab=calendar#{date}')
            except ValueError:
                error = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞."


    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã
    form_data = {
        'title': event.title or '',
        'event_type': event.event_type or '',
        'date': event.date.strftime('%Y-%m-%d') if event.date else '',
        'time': event.time.strftime('%H:%M') if event.time else '',
        'duration': event.duration_minutes if event.duration_minutes else '',
        'note': event.note or '',
        'is_yearly': 'on' if event.is_yearly else '',
        'apply_to_all': '',
        'repeat': 'on' if reminder and reminder.repeat else '',
        'repeat_every': reminder.repeat_every if reminder and reminder.repeat_every else 1,
        'remind_at': reminder.remind_at.strftime('%H:%M') if reminder and reminder.remind_at else '',
        'remind_date': reminder.remind_date.strftime('%Y-%m-%d') if reminder and reminder.remind_date else '',
    }

    repeat_days_selected = (
        [str(x) for x in reminder.repeat_days] 
        if reminder and getattr(reminder, 'repeat_days', None) 
        else []
    )

    return render(request, 'calendarapp/edit_event.html', {
        'event': event,
        'event_type_choices': event_type_choices,
        'weekday_choices': weekday_choices,
        'form_data': form_data,
        'repeat_days_selected': repeat_days_selected,
        'reminder': reminder,
        'error': error,
        'is_birthday': is_birthday
    })

def create_next_year_event():
    current_year = datetime.now().year
    next_year = current_year + 1

    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∏–º–µ—é—Ç —Å—Ç–∞—Ç—É—Å is_yearly=True
    last_events = Event.objects.filter(
        is_yearly=True
    )

    for last_event in last_events:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –≥–æ–¥ —Å–æ–±—ã—Ç–∏—è —Ä–∞–≤–µ–Ω –ø—Ä–æ—à–ª–æ–º—É –≥–æ–¥—É –∏–ª–∏ —Ä–∞–Ω–µ–µ
        if last_event.date.year == current_year - 1:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≥–æ–¥—ã
            new_date = last_event.date.replace(year=next_year + 1)
            Event.objects.get_or_create(
                pet=last_event.pet,
                title=last_event.title,
                date=new_date,
                defaults={
                    'event_type': last_event.event_type,
                    'time': last_event.time,
                    'duration_minutes': last_event.duration_minutes,
                    'note': last_event.note,
                    'is_yearly': True,
                    'is_done': False
                }
            )


@login_required
def mark_done(request, event_id):
    event = get_object_or_404(Event, id=event_id)
    current_year = timezone.now().year

    # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
    event.is_done = True
    event.done_year = current_year
    event.save()

    return redirect(f'/pets/{event.pet.id}/?tab=calendar#{event.date}')

    
    –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–¥–æ –∑–∞–ø—Ä–µ—Ç–∏—Ç—å —É–¥–∞–ª—è—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ 1-–æ–µ —Å–æ–±—ã—Ç–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑—Ä–∞–∑—É –≤—Å—é —Å–µ—Ä–∏—é –∏ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ 
@login_required
def delete_event(request, event_id):
    try:
        event = Event.objects.get(id=event_id)
        
        if request.user not in event.pet.owners.all():
            logger.warning(f"User {request.user} is not authorized to delete event {event_id}.")
            return redirect('pets:list')

        pet_id = event.pet.id
        


        if request.method == 'POST':
            delete_all = request.POST.get('delete_all') == 'on'

            if delete_all:
                # –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–±—ã—Ç–∏—è —Å —ç—Ç–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                Event.objects.filter(pet=event.pet, title=event.title, is_yearly=True).delete()
                logger.info(f"Deleted all events with title {event.title} for pet {event.pet.name}")
            else:
                # –£–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ
                event.delete()
                logger.info(f"Deleted event {event_id} for pet {event.pet.name}")

            return redirect(f'/pets/{pet_id}/?tab=calendar#{event.date}')

        return render(request, 'calendarapp/delete_event.html', {'event': event})

    except Event.DoesNotExist:
        logger.error(f"Event with id {event_id} does not exist.")
        return redirect('pets:list')
    except Exception as e:
        logger.error(f"Error deleting event {event_id}: {e}")
        return redirect(f'/pets/{pet_id}/?tab=calendar')